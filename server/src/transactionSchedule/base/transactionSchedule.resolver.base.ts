/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Public } from "../../decorators/public.decorator";
import { CreateTransactionScheduleArgs } from "./CreateTransactionScheduleArgs";
import { UpdateTransactionScheduleArgs } from "./UpdateTransactionScheduleArgs";
import { DeleteTransactionScheduleArgs } from "./DeleteTransactionScheduleArgs";
import { TransactionScheduleFindManyArgs } from "./TransactionScheduleFindManyArgs";
import { TransactionScheduleFindUniqueArgs } from "./TransactionScheduleFindUniqueArgs";
import { TransactionSchedule } from "./TransactionSchedule";
import { ScheduleEntryFindManyArgs } from "../../scheduleEntry/base/ScheduleEntryFindManyArgs";
import { ScheduleEntry } from "../../scheduleEntry/base/ScheduleEntry";
import { TransactionScheduleService } from "../transactionSchedule.service";

@graphql.Resolver(() => TransactionSchedule)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class TransactionScheduleResolverBase {
  constructor(
    protected readonly service: TransactionScheduleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @Public()
  @graphql.Query(() => MetaQueryPayload)
  async _transactionSchedulesMeta(
    @graphql.Args() args: TransactionScheduleFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @Public()
  @graphql.Query(() => [TransactionSchedule])
  async transactionSchedules(
    @graphql.Args() args: TransactionScheduleFindManyArgs
  ): Promise<TransactionSchedule[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => TransactionSchedule, { nullable: true })
  async transactionSchedule(
    @graphql.Args() args: TransactionScheduleFindUniqueArgs
  ): Promise<TransactionSchedule | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @Public()
  @graphql.Mutation(() => TransactionSchedule)
  async createTransactionSchedule(
    @graphql.Args() args: CreateTransactionScheduleArgs
  ): Promise<TransactionSchedule> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @Public()
  @graphql.Mutation(() => TransactionSchedule)
  async updateTransactionSchedule(
    @graphql.Args() args: UpdateTransactionScheduleArgs
  ): Promise<TransactionSchedule | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.Mutation(() => TransactionSchedule)
  async deleteTransactionSchedule(
    @graphql.Args() args: DeleteTransactionScheduleArgs
  ): Promise<TransactionSchedule | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => [ScheduleEntry])
  async scheduleEntries(
    @graphql.Parent() parent: TransactionSchedule,
    @graphql.Args() args: ScheduleEntryFindManyArgs
  ): Promise<ScheduleEntry[]> {
    const results = await this.service.findScheduleEntries(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
