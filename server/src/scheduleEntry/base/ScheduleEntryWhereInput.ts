/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccountWhereUniqueInput } from "../../account/base/AccountWhereUniqueInput";
import { ValidateNested, IsOptional, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { FloatFilter } from "../../util/FloatFilter";
import { TransactionLineWhereUniqueInput } from "../../transactionLine/base/TransactionLineWhereUniqueInput";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { StringFilter } from "../../util/StringFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { EnumScheduleEntryStatus } from "./EnumScheduleEntryStatus";
import { TransactionScheduleWhereUniqueInput } from "../../transactionSchedule/base/TransactionScheduleWhereUniqueInput";
@InputType()
class ScheduleEntryWhereInput {
  @ApiProperty({
    required: false,
    type: () => AccountWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AccountWhereUniqueInput)
  @IsOptional()
  @Field(() => AccountWhereUniqueInput, {
    nullable: true,
  })
  account?: AccountWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: FloatFilter,
  })
  @Type(() => FloatFilter)
  @IsOptional()
  @Field(() => FloatFilter, {
    nullable: true,
  })
  amount?: FloatFilter;

  @ApiProperty({
    required: false,
    type: () => TransactionLineWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TransactionLineWhereUniqueInput)
  @IsOptional()
  @Field(() => TransactionLineWhereUniqueInput, {
    nullable: true,
  })
  createdTransactionLine?: TransactionLineWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  generateDate?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  memo?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  postDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumScheduleEntryStatus,
  })
  @IsEnum(EnumScheduleEntryStatus)
  @IsOptional()
  @Field(() => EnumScheduleEntryStatus, {
    nullable: true,
  })
  status?:
    | "NotStarted"
    | "PendingTransactionCreation"
    | "TransactionCreated"
    | "Error";

  @ApiProperty({
    required: false,
    type: () => TransactionScheduleWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TransactionScheduleWhereUniqueInput)
  @IsOptional()
  @Field(() => TransactionScheduleWhereUniqueInput, {
    nullable: true,
  })
  transactionSchedule?: TransactionScheduleWhereUniqueInput;
}
export { ScheduleEntryWhereInput };
