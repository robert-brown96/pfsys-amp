/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateScheduleEntryArgs } from "./CreateScheduleEntryArgs";
import { UpdateScheduleEntryArgs } from "./UpdateScheduleEntryArgs";
import { DeleteScheduleEntryArgs } from "./DeleteScheduleEntryArgs";
import { ScheduleEntryFindManyArgs } from "./ScheduleEntryFindManyArgs";
import { ScheduleEntryFindUniqueArgs } from "./ScheduleEntryFindUniqueArgs";
import { ScheduleEntry } from "./ScheduleEntry";
import { Account } from "../../account/base/Account";
import { TransactionLine } from "../../transactionLine/base/TransactionLine";
import { TransactionSchedule } from "../../transactionSchedule/base/TransactionSchedule";
import { ScheduleEntryService } from "../scheduleEntry.service";

@graphql.Resolver(() => ScheduleEntry)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ScheduleEntryResolverBase {
  constructor(
    protected readonly service: ScheduleEntryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ScheduleEntry",
    action: "read",
    possession: "any",
  })
  async _scheduleEntriesMeta(
    @graphql.Args() args: ScheduleEntryFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ScheduleEntry])
  @nestAccessControl.UseRoles({
    resource: "ScheduleEntry",
    action: "read",
    possession: "any",
  })
  async scheduleEntries(
    @graphql.Args() args: ScheduleEntryFindManyArgs
  ): Promise<ScheduleEntry[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ScheduleEntry, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ScheduleEntry",
    action: "read",
    possession: "own",
  })
  async scheduleEntry(
    @graphql.Args() args: ScheduleEntryFindUniqueArgs
  ): Promise<ScheduleEntry | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScheduleEntry)
  @nestAccessControl.UseRoles({
    resource: "ScheduleEntry",
    action: "create",
    possession: "any",
  })
  async createScheduleEntry(
    @graphql.Args() args: CreateScheduleEntryArgs
  ): Promise<ScheduleEntry> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        account: {
          connect: args.data.account,
        },

        createdTransactionLine: args.data.createdTransactionLine
          ? {
              connect: args.data.createdTransactionLine,
            }
          : undefined,

        transactionSchedule: {
          connect: args.data.transactionSchedule,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScheduleEntry)
  @nestAccessControl.UseRoles({
    resource: "ScheduleEntry",
    action: "update",
    possession: "any",
  })
  async updateScheduleEntry(
    @graphql.Args() args: UpdateScheduleEntryArgs
  ): Promise<ScheduleEntry | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          account: {
            connect: args.data.account,
          },

          createdTransactionLine: args.data.createdTransactionLine
            ? {
                connect: args.data.createdTransactionLine,
              }
            : undefined,

          transactionSchedule: {
            connect: args.data.transactionSchedule,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ScheduleEntry)
  @nestAccessControl.UseRoles({
    resource: "ScheduleEntry",
    action: "delete",
    possession: "any",
  })
  async deleteScheduleEntry(
    @graphql.Args() args: DeleteScheduleEntryArgs
  ): Promise<ScheduleEntry | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Account, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async account(
    @graphql.Parent() parent: ScheduleEntry
  ): Promise<Account | null> {
    const result = await this.service.getAccount(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TransactionLine, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TransactionLine",
    action: "read",
    possession: "any",
  })
  async createdTransactionLine(
    @graphql.Parent() parent: ScheduleEntry
  ): Promise<TransactionLine | null> {
    const result = await this.service.getCreatedTransactionLine(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TransactionSchedule, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TransactionSchedule",
    action: "read",
    possession: "any",
  })
  async transactionSchedule(
    @graphql.Parent() parent: ScheduleEntry
  ): Promise<TransactionSchedule | null> {
    const result = await this.service.getTransactionSchedule(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
