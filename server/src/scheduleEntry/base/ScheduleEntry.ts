/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Account } from "../../account/base/Account";
import {
  ValidateNested,
  IsNumber,
  IsDate,
  IsOptional,
  IsString,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { TransactionLine } from "../../transactionLine/base/TransactionLine";
import { EnumScheduleEntryStatus } from "./EnumScheduleEntryStatus";
import { TransactionSchedule } from "../../transactionSchedule/base/TransactionSchedule";
@ObjectType()
class ScheduleEntry {
  @ApiProperty({
    required: true,
    type: () => Account,
  })
  @ValidateNested()
  @Type(() => Account)
  account?: Account;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Number)
  amount!: number;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => TransactionLine,
  })
  @ValidateNested()
  @Type(() => TransactionLine)
  @IsOptional()
  createdTransactionLine?: TransactionLine | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  generateDate!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  memo!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  postDate!: Date | null;

  @ApiProperty({
    required: true,
    enum: EnumScheduleEntryStatus,
  })
  @IsEnum(EnumScheduleEntryStatus)
  @Field(() => EnumScheduleEntryStatus, {
    nullable: true,
  })
  status?:
    | "NotStarted"
    | "PendingTransactionCreation"
    | "TransactionCreated"
    | "Error";

  @ApiProperty({
    required: true,
    type: () => TransactionSchedule,
  })
  @ValidateNested()
  @Type(() => TransactionSchedule)
  transactionSchedule?: TransactionSchedule;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}
export { ScheduleEntry };
