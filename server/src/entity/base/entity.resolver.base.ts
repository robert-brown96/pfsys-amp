/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateEntityArgs } from "./CreateEntityArgs";
import { UpdateEntityArgs } from "./UpdateEntityArgs";
import { DeleteEntityArgs } from "./DeleteEntityArgs";
import { EntityFindManyArgs } from "./EntityFindManyArgs";
import { EntityFindUniqueArgs } from "./EntityFindUniqueArgs";
import { Entity } from "./Entity";
import { TransactionLineFindManyArgs } from "../../transactionLine/base/TransactionLineFindManyArgs";
import { TransactionLine } from "../../transactionLine/base/TransactionLine";
import { Account } from "../../account/base/Account";
import { EntityService } from "../entity.service";

@graphql.Resolver(() => Entity)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class EntityResolverBase {
  constructor(
    protected readonly service: EntityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Entity",
    action: "read",
    possession: "any",
  })
  async _entitiesMeta(
    @graphql.Args() args: EntityFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Entity])
  @nestAccessControl.UseRoles({
    resource: "Entity",
    action: "read",
    possession: "any",
  })
  async entities(@graphql.Args() args: EntityFindManyArgs): Promise<Entity[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Entity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Entity",
    action: "read",
    possession: "own",
  })
  async entity(
    @graphql.Args() args: EntityFindUniqueArgs
  ): Promise<Entity | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Entity)
  @nestAccessControl.UseRoles({
    resource: "Entity",
    action: "create",
    possession: "any",
  })
  async createEntity(@graphql.Args() args: CreateEntityArgs): Promise<Entity> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        defaultAccount: args.data.defaultAccount
          ? {
              connect: args.data.defaultAccount,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Entity)
  @nestAccessControl.UseRoles({
    resource: "Entity",
    action: "update",
    possession: "any",
  })
  async updateEntity(
    @graphql.Args() args: UpdateEntityArgs
  ): Promise<Entity | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          defaultAccount: args.data.defaultAccount
            ? {
                connect: args.data.defaultAccount,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Entity)
  @nestAccessControl.UseRoles({
    resource: "Entity",
    action: "delete",
    possession: "any",
  })
  async deleteEntity(
    @graphql.Args() args: DeleteEntityArgs
  ): Promise<Entity | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TransactionLine])
  @nestAccessControl.UseRoles({
    resource: "TransactionLine",
    action: "read",
    possession: "any",
  })
  async transactionLines(
    @graphql.Parent() parent: Entity,
    @graphql.Args() args: TransactionLineFindManyArgs
  ): Promise<TransactionLine[]> {
    const results = await this.service.findTransactionLines(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Account, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async defaultAccount(
    @graphql.Parent() parent: Entity
  ): Promise<Account | null> {
    const result = await this.service.getDefaultAccount(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
