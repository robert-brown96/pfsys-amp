/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateJobTypeArgs } from "./CreateJobTypeArgs";
import { UpdateJobTypeArgs } from "./UpdateJobTypeArgs";
import { DeleteJobTypeArgs } from "./DeleteJobTypeArgs";
import { JobTypeFindManyArgs } from "./JobTypeFindManyArgs";
import { JobTypeFindUniqueArgs } from "./JobTypeFindUniqueArgs";
import { JobType } from "./JobType";
import { JobFindManyArgs } from "../../job/base/JobFindManyArgs";
import { Job } from "../../job/base/Job";
import { JobTypeService } from "../jobType.service";

@graphql.Resolver(() => JobType)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class JobTypeResolverBase {
  constructor(
    protected readonly service: JobTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "JobType",
    action: "read",
    possession: "any",
  })
  async _jobTypesMeta(
    @graphql.Args() args: JobTypeFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [JobType])
  @nestAccessControl.UseRoles({
    resource: "JobType",
    action: "read",
    possession: "any",
  })
  async jobTypes(
    @graphql.Args() args: JobTypeFindManyArgs
  ): Promise<JobType[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => JobType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "JobType",
    action: "read",
    possession: "own",
  })
  async jobType(
    @graphql.Args() args: JobTypeFindUniqueArgs
  ): Promise<JobType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JobType)
  @nestAccessControl.UseRoles({
    resource: "JobType",
    action: "create",
    possession: "any",
  })
  async createJobType(
    @graphql.Args() args: CreateJobTypeArgs
  ): Promise<JobType> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JobType)
  @nestAccessControl.UseRoles({
    resource: "JobType",
    action: "update",
    possession: "any",
  })
  async updateJobType(
    @graphql.Args() args: UpdateJobTypeArgs
  ): Promise<JobType | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobType)
  @nestAccessControl.UseRoles({
    resource: "JobType",
    action: "delete",
    possession: "any",
  })
  async deleteJobType(
    @graphql.Args() args: DeleteJobTypeArgs
  ): Promise<JobType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Job])
  @nestAccessControl.UseRoles({
    resource: "Job",
    action: "read",
    possession: "any",
  })
  async jobs(
    @graphql.Parent() parent: JobType,
    @graphql.Args() args: JobFindManyArgs
  ): Promise<Job[]> {
    const results = await this.service.findJobs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
