/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Public } from "../../decorators/public.decorator";
import { CreateTransactionArgs } from "./CreateTransactionArgs";
import { UpdateTransactionArgs } from "./UpdateTransactionArgs";
import { DeleteTransactionArgs } from "./DeleteTransactionArgs";
import { TransactionFindManyArgs } from "./TransactionFindManyArgs";
import { TransactionFindUniqueArgs } from "./TransactionFindUniqueArgs";
import { Transaction } from "./Transaction";
import { BookFindManyArgs } from "../../book/base/BookFindManyArgs";
import { Book } from "../../book/base/Book";
import { TransactionLineFindManyArgs } from "../../transactionLine/base/TransactionLineFindManyArgs";
import { TransactionLine } from "../../transactionLine/base/TransactionLine";
import { Job } from "../../job/base/Job";
import { Currency } from "../../currency/base/Currency";
import { TransactionService } from "../transaction.service";

@graphql.Resolver(() => Transaction)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class TransactionResolverBase {
  constructor(
    protected readonly service: TransactionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @Public()
  @graphql.Query(() => MetaQueryPayload)
  async _transactionsMeta(
    @graphql.Args() args: TransactionFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @Public()
  @graphql.Query(() => [Transaction])
  async transactions(
    @graphql.Args() args: TransactionFindManyArgs
  ): Promise<Transaction[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => Transaction, { nullable: true })
  async transaction(
    @graphql.Args() args: TransactionFindUniqueArgs
  ): Promise<Transaction | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @Public()
  @graphql.Mutation(() => Transaction)
  async createTransaction(
    @graphql.Args() args: CreateTransactionArgs
  ): Promise<Transaction> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        createdFromJob: args.data.createdFromJob
          ? {
              connect: args.data.createdFromJob,
            }
          : undefined,

        currency: {
          connect: args.data.currency,
        },
      },
    });
  }

  @Public()
  @graphql.Mutation(() => Transaction)
  async updateTransaction(
    @graphql.Args() args: UpdateTransactionArgs
  ): Promise<Transaction | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          createdFromJob: args.data.createdFromJob
            ? {
                connect: args.data.createdFromJob,
              }
            : undefined,

          currency: {
            connect: args.data.currency,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.Mutation(() => Transaction)
  async deleteTransaction(
    @graphql.Args() args: DeleteTransactionArgs
  ): Promise<Transaction | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => [Book])
  async book(
    @graphql.Parent() parent: Transaction,
    @graphql.Args() args: BookFindManyArgs
  ): Promise<Book[]> {
    const results = await this.service.findBook(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @Public()
  @graphql.ResolveField(() => [TransactionLine])
  async transactionLines(
    @graphql.Parent() parent: Transaction,
    @graphql.Args() args: TransactionLineFindManyArgs
  ): Promise<TransactionLine[]> {
    const results = await this.service.findTransactionLines(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @Public()
  @graphql.ResolveField(() => Job, { nullable: true })
  async createdFromJob(
    @graphql.Parent() parent: Transaction
  ): Promise<Job | null> {
    const result = await this.service.getCreatedFromJob(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @Public()
  @graphql.ResolveField(() => Currency, { nullable: true })
  async currency(
    @graphql.Parent() parent: Transaction
  ): Promise<Currency | null> {
    const result = await this.service.getCurrency(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
