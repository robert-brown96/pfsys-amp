/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAccountTypeArgs } from "./CreateAccountTypeArgs";
import { UpdateAccountTypeArgs } from "./UpdateAccountTypeArgs";
import { DeleteAccountTypeArgs } from "./DeleteAccountTypeArgs";
import { AccountTypeFindManyArgs } from "./AccountTypeFindManyArgs";
import { AccountTypeFindUniqueArgs } from "./AccountTypeFindUniqueArgs";
import { AccountType } from "./AccountType";
import { AccountFindManyArgs } from "../../account/base/AccountFindManyArgs";
import { Account } from "../../account/base/Account";
import { AccountTypeService } from "../accountType.service";

@graphql.Resolver(() => AccountType)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class AccountTypeResolverBase {
  constructor(
    protected readonly service: AccountTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AccountType",
    action: "read",
    possession: "any",
  })
  async _accountTypesMeta(
    @graphql.Args() args: AccountTypeFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AccountType])
  @nestAccessControl.UseRoles({
    resource: "AccountType",
    action: "read",
    possession: "any",
  })
  async accountTypes(
    @graphql.Args() args: AccountTypeFindManyArgs
  ): Promise<AccountType[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AccountType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AccountType",
    action: "read",
    possession: "own",
  })
  async accountType(
    @graphql.Args() args: AccountTypeFindUniqueArgs
  ): Promise<AccountType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccountType)
  @nestAccessControl.UseRoles({
    resource: "AccountType",
    action: "create",
    possession: "any",
  })
  async createAccountType(
    @graphql.Args() args: CreateAccountTypeArgs
  ): Promise<AccountType> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccountType)
  @nestAccessControl.UseRoles({
    resource: "AccountType",
    action: "update",
    possession: "any",
  })
  async updateAccountType(
    @graphql.Args() args: UpdateAccountTypeArgs
  ): Promise<AccountType | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccountType)
  @nestAccessControl.UseRoles({
    resource: "AccountType",
    action: "delete",
    possession: "any",
  })
  async deleteAccountType(
    @graphql.Args() args: DeleteAccountTypeArgs
  ): Promise<AccountType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Account])
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async accounts(
    @graphql.Parent() parent: AccountType,
    @graphql.Args() args: AccountFindManyArgs
  ): Promise<Account[]> {
    const results = await this.service.findAccounts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
