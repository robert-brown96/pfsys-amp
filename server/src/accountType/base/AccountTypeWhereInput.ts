/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EnumAccountTypeAccountCategory } from "./EnumAccountTypeAccountCategory";
import { IsEnum, IsOptional, ValidateNested } from "class-validator";
import { AccountListRelationFilter } from "../../account/base/AccountListRelationFilter";
import { Type } from "class-transformer";
import { StringFilter } from "../../util/StringFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { EnumAccountTypeUnit } from "./EnumAccountTypeUnit";
@InputType()
class AccountTypeWhereInput {
  @ApiProperty({
    required: false,
    enum: EnumAccountTypeAccountCategory,
  })
  @IsEnum(EnumAccountTypeAccountCategory)
  @IsOptional()
  @Field(() => EnumAccountTypeAccountCategory, {
    nullable: true,
  })
  accountCategory?:
    | "Asset"
    | "Liability"
    | "Equity"
    | "Revenue"
    | "Expense"
    | "NonPosting";

  @ApiProperty({
    required: false,
    type: () => AccountListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AccountListRelationFilter)
  @IsOptional()
  @Field(() => AccountListRelationFilter, {
    nullable: true,
  })
  accounts?: AccountListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  name?: StringNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumAccountTypeUnit,
  })
  @IsEnum(EnumAccountTypeUnit)
  @IsOptional()
  @Field(() => EnumAccountTypeUnit, {
    nullable: true,
  })
  unit?: "Currency" | "Stock";
}
export { AccountTypeWhereInput };
