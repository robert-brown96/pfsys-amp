/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTransactionLineArgs } from "./CreateTransactionLineArgs";
import { UpdateTransactionLineArgs } from "./UpdateTransactionLineArgs";
import { DeleteTransactionLineArgs } from "./DeleteTransactionLineArgs";
import { TransactionLineFindManyArgs } from "./TransactionLineFindManyArgs";
import { TransactionLineFindUniqueArgs } from "./TransactionLineFindUniqueArgs";
import { TransactionLine } from "./TransactionLine";
import { Account } from "../../account/base/Account";
import { Transaction } from "../../transaction/base/Transaction";
import { TransactionLineService } from "../transactionLine.service";

@graphql.Resolver(() => TransactionLine)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class TransactionLineResolverBase {
  constructor(
    protected readonly service: TransactionLineService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TransactionLine",
    action: "read",
    possession: "any",
  })
  async _transactionLinesMeta(
    @graphql.Args() args: TransactionLineFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TransactionLine])
  @nestAccessControl.UseRoles({
    resource: "TransactionLine",
    action: "read",
    possession: "any",
  })
  async transactionLines(
    @graphql.Args() args: TransactionLineFindManyArgs
  ): Promise<TransactionLine[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TransactionLine, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TransactionLine",
    action: "read",
    possession: "own",
  })
  async transactionLine(
    @graphql.Args() args: TransactionLineFindUniqueArgs
  ): Promise<TransactionLine | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TransactionLine)
  @nestAccessControl.UseRoles({
    resource: "TransactionLine",
    action: "create",
    possession: "any",
  })
  async createTransactionLine(
    @graphql.Args() args: CreateTransactionLineArgs
  ): Promise<TransactionLine> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        account: {
          connect: args.data.account,
        },

        transaction: {
          connect: args.data.transaction,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TransactionLine)
  @nestAccessControl.UseRoles({
    resource: "TransactionLine",
    action: "update",
    possession: "any",
  })
  async updateTransactionLine(
    @graphql.Args() args: UpdateTransactionLineArgs
  ): Promise<TransactionLine | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          account: {
            connect: args.data.account,
          },

          transaction: {
            connect: args.data.transaction,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TransactionLine)
  @nestAccessControl.UseRoles({
    resource: "TransactionLine",
    action: "delete",
    possession: "any",
  })
  async deleteTransactionLine(
    @graphql.Args() args: DeleteTransactionLineArgs
  ): Promise<TransactionLine | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Account, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async account(
    @graphql.Parent() parent: TransactionLine
  ): Promise<Account | null> {
    const result = await this.service.getAccount(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Transaction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "read",
    possession: "any",
  })
  async transaction(
    @graphql.Parent() parent: TransactionLine
  ): Promise<Transaction | null> {
    const result = await this.service.getTransaction(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
