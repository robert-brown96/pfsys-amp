datasource postgres {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  books     Book[]
  createdAt DateTime @default(now())
  email     String
  firstName String?
  id        String   @id @default(cuid())
  lastName  String?
  password  String
  roles     Json
  updatedAt DateTime @updatedAt
  username  String   @unique
}

model Book {
  createdAt         DateTime      @default(now())
  id                String        @id @default(cuid())
  isPrimary         Boolean?
  name              String        @unique
  owner             User?         @relation(fields: [ownerId], references: [id])
  ownerId           String?
  primaryCurrency   Currency      @relation(fields: [primaryCurrencyId], references: [id])
  primaryCurrencyId String
  transactions      Transaction[]
  updatedAt         DateTime      @updatedAt
}

model Currency {
  books        Book[]
  code         String        @unique
  createdAt    DateTime      @default(now())
  id           String        @id @default(cuid())
  isPrimary    Boolean?
  name         String
  transactions Transaction[]
  updatedAt    DateTime      @updatedAt
}

model Transaction {
  book             Book[]
  createdAt        DateTime          @default(now())
  currency         Currency          @relation(fields: [currencyId], references: [id])
  currencyId       String
  id               String            @id @default(cuid())
  trandate         DateTime
  transactionLines TransactionLine[]
  updatedAt        DateTime          @updatedAt
}

model AccountType {
  accountCategory EnumAccountTypeAccountCategory
  accounts        Account[]
  createdAt       DateTime                       @default(now())
  id              String                         @id @default(cuid())
  name            String?
  unit            EnumAccountTypeUnit
  updatedAt       DateTime                       @updatedAt
}

model Account {
  accountNumber    Int               @unique
  accountType      AccountType       @relation(fields: [accountTypeId], references: [id])
  accountTypeId    String
  childAccounts    Account[]         @relation(name: "childAccounts")
  createdAt        DateTime          @default(now())
  id               String            @id @default(cuid())
  isExternal       Boolean?
  isSummary        Boolean?
  name             String            @unique
  parent           Account?          @relation(name: "childAccounts", fields: [parentId], references: [id])
  parentId         String?
  transactionLines TransactionLine[]
  updatedAt        DateTime          @updatedAt
}

model TransactionLine {
  account       Account     @relation(fields: [accountId], references: [id])
  accountId     String
  createdAt     DateTime    @default(now())
  credit        Float?
  data          Json?
  debit         Float?
  id            String      @id @default(cuid())
  isReconciled  Boolean?
  memo          String?
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
  updatedAt     DateTime    @updatedAt
}

enum EnumAccountTypeAccountCategory {
  Asset
  Liability
  Equity
  Revenue
  Expense
  NonPosting
}

enum EnumAccountTypeUnit {
  Currency
  Stock
}